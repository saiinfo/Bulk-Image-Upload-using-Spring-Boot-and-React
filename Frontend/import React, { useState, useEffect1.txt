import React, { useState, useEffect ,useRef } from 'react';
import axios from 'axios';
import {
    Container,
    Typography,
    TableContainer,
    Paper,
    Table,
    TableHead,
    TableRow,
    TableCell,
    TableBody,
    Button,
    IconButton,
    Pagination,
} from '@mui/material';
import GetAppIcon from '@material-ui/icons/GetApp'; // Import the export icon
import CloudUploadIcon from '@material-ui/icons/CloudUpload'; // Import the upload icon

const PAGE_SIZE = 10;

function CustomerList() {
  const [customers, setCustomers] = useState([]);
  const [totalPages, setTotalPages] = useState(0);
  const [currentPage, setCurrentPage] = useState(0);
 const fileInputRef = useRef(null); // Create a ref for the file input element
 const storedFile = JSON.parse(localStorage.getItem('selectedFile'));
 const [selectedFile, setSelectedFile] = useState(storedFile || null);
 const [isUploading, setIsUploading] = useState(false); // Add a loading state
 const [uploadSuccess, setUploadSuccess] = useState(false); // Add a success state


  const handleClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
        setSelectedFile(file); // Store selected file in state
        handleUpload(file);
    }
  };


  

  const fetchCustomers = (page) => {
    axios.get(`/customers?page=${page}&size=${PAGE_SIZE}`)
      .then(response => {
        setCustomers(response.data.customers);
        setTotalPages(response.data.totalPages);
      })
      .catch(error => {
        console.error('Error fetching customers:', error);
      });
  };



  
  const handlePageChange = (event, newPage) => {
    setCurrentPage(newPage - 1); // Convert to zero-based index
  };


  useEffect(() => {
    // Store the selectedFile value in localStorage
    localStorage.setItem('selectedFile', JSON.stringify(selectedFile));

    fetchCustomers(currentPage);
  }, [currentPage, selectedFile]); // Add selectedFile as a dependency


  const handleExport = () => {
    axios.get('/export', { responseType: 'blob' })
      .then(response => {
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'customer_data.xlsx');
        document.body.appendChild(link);
        link.click();
      })
      .catch(error => {
        console.error('Error exporting file:', error);
      });
  };


  // const handleUpload = (selectedFile) => {
  //   const formData = new FormData();
  //   formData.append('file', selectedFile);

  //   axios.post('/upload', formData)
  //     .then(response => {
  //       console.log(response.data);
  //       fetchCustomers(currentPage);
  //     })
  //     .catch(error => {
  //       console.error('Error uploading file:', error);
  //     });

  //   fileInputRef.current.value = null; // Clear the file input value
  //   setSelectedFile(null); // Clear the selected file in state
  // };

  const handleUpload = (selectedFile) => {
    setIsUploading(true); // Start uploading
    const formData = new FormData();
    formData.append('file', selectedFile);

    axios.post('/upload', formData)
      .then(response => {
        console.log(response.data);
        fetchCustomers(currentPage);
        setIsUploading(false); // Upload complete
        setUploadSuccess(true); // Set success state
      })
      .catch(error => {
        console.error('Error uploading file:', error);
        setIsUploading(false); // Upload complete (with error)
        setUploadSuccess(false); // Clear success state
      });

    fileInputRef.current.value = null;
    setSelectedFile(null);
  };


  return (
    <Container maxWidth="md">
      <Typography variant="h4" align="center" gutterBottom>
        Customer Bulk Of Excel Uplode & Downloade
      </Typography>
      <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: '10px' }}>
        <input
          type="file"
          ref={fileInputRef}
          style={{ display: 'none' }}
          onChange={handleFileChange}
          accept=".xlsx, .xls"
        />
        <Button
          variant="contained"
          color="primary"
          startIcon={<CloudUploadIcon />}
          onClick={() => fileInputRef.current.click()}
        >
          Upload
        </Button>
        {isUploading ? (
          <Typography variant="body1">Uploading...</Typography>
        ) : (
          <IconButton color="primary" onClick={handleExport}>
            <GetAppIcon />
          </IconButton>
        )}
      </div>
      {uploadSuccess && (
        <Typography variant="body1" style={{ color: 'green' }}>
          File uploaded successfully!
        </Typography>
      )}
      
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>First Name</TableCell>
              <TableCell>Last Name</TableCell>
              <TableCell>Phone</TableCell>
              <TableCell>City</TableCell>
              <TableCell>Acquired Date</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {customers.map((customer) => (
              <TableRow key={customer.customerId}>
                <TableCell>{customer.customerId}</TableCell>
                <TableCell>{customer.firstName}</TableCell>
                <TableCell>{customer.lastName}</TableCell>
                <TableCell>{customer.phone}</TableCell>
                <TableCell>{customer.city}</TableCell>
                <TableCell>{customer.acquiredDate}</TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>
      <div style={{ display: 'flex', justifyContent: 'center', marginTop: '20px' }}>
        <Pagination
          count={totalPages}
          page={currentPage + 1} // Convert back to one-based index
          onChange={handlePageChange}
          shape="rounded"
        />
      </div>
    </Container>
  );
}

export default CustomerList;
